buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven-publish'

ext {
    if (mc_minor == "0") {
        mc_version = "1.${mc_major}"
    } else {
        mc_version = "1.${mc_major}.${mc_minor}"
    }
}

version = "${mc_version}-${mod_status}${major}.${minor}.${patch}"
group = mod_package
archivesBaseName = mod_id

sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"
    mappings = "stable_39"
}

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://maven.blamejared.com/" }
    maven { url "https://maven.mcmoddev.com/" }
}

dependencies {
    compileOnly "blusunrize:ImmersiveEngineering:0.${mc_major}+:deobf" // API didn't work 26/07/2017

    compileOnly "net.darkhax.bookshelf:Bookshelf-${mc_version}:+:deobf"
    compileOnly "net.darkhax.gamestages:GameStages-${mc_version}:+:deobf"

    compile "mezz.jei:jei_${mc_version}:+"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", mc_version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version': project.version, 'mcversion': mc_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'ftgumod_at.cfg'
    }
    finalizedBy reobfJar
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest {
        attributes 'FMLAT': 'ftgumod_at.cfg'
    }
}

task apiJar(type: Jar) {
    from(sourceSets.main.java) {
        include "ftgumod/api/**"
    }
    classifier = 'api'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId "astavie"
            artifactId mod_package
            version project.version

            artifact jar
            artifact apiJar
            artifact deobfJar
            artifact sourcesJar
        }
    }
}

publishing {
    repositories {
        maven {
            url "/home/astavie/Documents/Code/Maven"
        }
    }
}

task pushMaven(type: Exec) {
    workingDir '/home/astavie/Documents/Code/Maven'
    commandLine 'bash', 'push.sh', "astavie/${mod_package}", "Maven, ${mod_id}, ${project.version}"
}

task increaseVersion {
    doLast {
        def variable = 'patch'

        if (project.hasProperty('variable')) {
            def tmp = project.getProperty('variable')
            if (tmp == 'major' || tmp == 'minor') {
                variable = tmp
            }
        }

        def file = file('gradle.properties')
        if (file.canRead()) {
            Properties versions = new Properties()
            versions.load(new FileInputStream(file))

            def version = versions[variable].toInteger() + 1
            versions[variable] = version.toString()

            if (variable != 'patch') {
                versions['patch'] = '0'

                if (variable != 'minor') {
                    versions['minor'] = '0'
                }
            }

            versions.store(file.newWriter(), null)
        }
    }
}

pushMaven.dependsOn publish
